/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial.pdf)
 * Chapter: 6
 * Example: 3
 * Summary:
 *        Kernel that doubles values in a vector.
 */
package vectors;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

class VectorsKernel extends Kernel {

	VectorsKernel(KernelParameters parameters, int vectorSize) {
		super(parameters);

		DFEVectorType<DFEVar> vectorType =
			new DFEVectorType<DFEVar>(dfeUInt(32), vectorSize);

		// Input
		DFEVector<DFEVar> matrix = io.input("matrix", vectorType);
		DFEVar[] matrica = new DFEVar[vectorSize];
		
		
		DFEVar[] matricaMnozenje = new DFEVar[vectorSize];
		for (int i =0; i<vectorSize; i++)
		{
		    matrica[i] = matrix[i];
		    matricaMnozenje[i] = matrix[i];
		}
		
		int matrixSize = (int)Math.sqrt(vectorSize);
		
		for (int i =1; i<matrixSize; i++)
		{
		    matricaMnozenje = this.matrixMultiply(matricaMnozenje, matrica, matrixSize);
		}
		DFEVector<DFEVar> matrixSelfPowered = vectorType.newInstance(this);
		System.out.println(vectorSize);
		for (int i =0; i<vectorSize; i++)
		{
		    matrixSelfPowered[i] <== matricaMnozenje[i];
		}
		
		
		//Output
		io.output("matrixOut", matrix, vectorType);
	}
	
	private DFEVar[] matrixMultiply(DFEVar[] matrix1,DFEVar[] matrix2, int matrixSize)
	{
	    DFEVar[] matrixMultiplied = new DFEVar[matrixSize*matrixSize];
	    for (int i =0; i<matrixSize; i++)
	        for (int j =0; j<matrixSize; j++)
	        {
	            DFEVar temp = matrix1[i*matrixSize]*matrix2[j];
	            for (int k =1; k<matrixSize; k++)
	            {
	                temp = temp + matrix1[i*matrixSize+k]*matrix2[k*matrixSize+j];
	            }
	            matrixMultiplied[i*matrixSize+j] <== temp;
	        }
	   return matrixMultiplied;
	}

}
